import java.io.*;

// Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

// Example 1:

// Input:
// 11110
// 11010
// 11000
// 00000
// Output: 1

// Example 2:

// Input:
// 11000
// 11000
// 00100
// 00011
// Output: 3

class Solution {
    public int numIslands(char[][] grid) {
        //if grid is empty or null return 0 islands
        if(grid == null || grid.length == 0){
          return 0;
        }
        int islandCount = 0;
        for(int i = 0; i<grid.length; i++){ //number of rows = grid length
          for(int j = 0; j <grid[i].length; j++){ //number of cols = grid[i].length
            if(grid[i][j] == '1'){
              islandCount += dfs(grid, i, j);
            }
          }        
        }
        return islandCount;
    }
    private int dfs(char[][] grid, int i, int j){
      // if i or j is out of bounds or if char == "0" --> do nothing
      if(i < 0 || i >= grid.length || j >= grid[i].length || j <0 || grid[i][j] == '0'){
        return 0;
      }
      grid[i][j] = '0'; //change the visited "1" char to a "0"
      //if a "1" is found in that space then recursively do  a search of it's neighbors
      dfs(grid, i-1, j);
      dfs(grid, i+1, j);
      dfs(grid, i, j-1);
      dfs(grid, i, j+1);
      return 1;
    }
}
